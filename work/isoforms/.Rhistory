}
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
methylation[[1]][1:5, "5500"]
islands[2]
methylation[[1]][1:5, 1:5]
colnames(methylation[[1]])
colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
islands[2]
cpg_islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1]) {
for(k in cpg_islands[2]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
View(pvals)
methylation[[1]][1:5, 5]
methylation[[1]][, 5]
methylation[[1]][1:10, 1:8]
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
t.test
?t.test
View(pvals)
methylation[[1]][1:5, 1:10]
methylation_expression[["BRCA"]][1:5, 1:5]
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292)
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292) -> met_tmp
met_tmp2 <- na.omit(met_tmp)
View(met_tmp2)
boxplot(cg00000292 ~ ZNF205, met_tmp2)
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
View(met_tmp2)
length(methylation[[1]]$bcr_patient_barcode)
length(unique(methylation[[1]]$bcr_patient_barcode))
head(methylation[[1]]$bcr_patient_barcode)
dim(OV.methylation1)
dim(OV.methylation2)
methylation_expression[[1]][, "ZNF205"] %>% table()
methylation_expression[[1]][, "cg00000292"] %>% summary()
methylation[[1]][, "cg00000292"] %>% summary()
length(methylation[[1]][, "cg00000292"])
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
methylation <- list(
BRCA = BRCA.methylation,
COAD = COAD.methylation,
COADREAD = COADREAD.methylation,
GBM = GBM.methylation,
GBMLGG = GBMLGG.methylation,
KIPAN = KIPAN.methylation,
KIRC = KIRC.methylation,
KIRP = KIRP.methylation,
LAML = LAML.methylation,
LUAD = LUAD.methylation,
LUSC = LUSC.methylation,
OV = rbind(OV.methylation1, OV.methylation2),
READ = READ.methylation,
STAD = STAD.methylation,
STES = STES.methylation,
UCEC = UCEC.methylation
)
for(i in names(methylation)) {
methylation[[i]] <- methylation[[i]] %>%
mutate(bcr_patient_barcode = substr(bcr_patient_barcode, 1, 12))
}
methylation_expression <- list()
for(i in names(methylation)) {
methylation_expression[[i]] <- expressions_split[[i]] %>% left_join(methylation[[i]])
}
cpg_islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
n_of_combinations <- length(islands)*length(selected_genes)*length(methylation)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
View(pvals)
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw=raw[,c(2,3,4)] # getting rid of the "people" variable as I see no use for it
freq=table(col(raw), as.matrix(raw)) # get the counts of each factor level
Names=c("Food","Music","People")     # create list of names
data=data.frame(cbind(freq),Names)   # combine them into a data frame
data=data[,c(5,3,1,2,4)]             # sort columns
# melt the data frame for plotting
data.m <- melt(data, id.vars='Names')
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
data.m <- melt(data, id.vars='Names')
library(reshape)
data.m <- melt(data, id.vars='Names')
library(ggplot2)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "identity", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
View(data.m)
# plot everything
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
# plot everything
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
View(data.m)
View(data.m)
View(data.m)
datat <- data.m[data.m$variable %in% c("Bad", "Good"), ]
View(datat)
View(datat)
datat[datat$variable = "Good", "value"]
View(datat)
datat[datat$variable == "Good", "value"]
datat[datat$variable == "Good", "value"] <- - datat[datat$variable == "Good", "value"]
View(datat)
# plot everything
ggplot(datat, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
load("C:/Users/rafalc/Documents/MLGenSig/2. correlation/data/methylation.Rdata")
for(i in names(methylation)) {
try({
selected_methylation <- methylation[[i]]#[, !is.na(methylation[[i]][1, ])]
splitted_methylation <- split(selected_methylation, rep(1:ceiling(nrow(selected_methylation)/10), each = 10, length.out = nrow(selected_methylation)))
#write_feather(selected_methylation, path = paste("data/methylation/", i, "methylation.feather", sep = ""))
for(j in 1:length(splitted_methylation)){
#methylation_part <- splitted_methylation[[j]]
write.csv(splitted_methylation[[j]], file = paste("data/methylation/", i, "methylation_pt_", j, ".csv", sep = ""))
}
})
}
getwd()
setwd("~/MLGenSig/KRAB_ZNF/app")
for(i in names(methylation)) {
try({
selected_methylation <- methylation[[i]]#[, !is.na(methylation[[i]][1, ])]
splitted_methylation <- split(selected_methylation, rep(1:ceiling(nrow(selected_methylation)/10), each = 10, length.out = nrow(selected_methylation)))
#write_feather(selected_methylation, path = paste("data/methylation/", i, "methylation.feather", sep = ""))
for(j in 1:length(splitted_methylation)){
#methylation_part <- splitted_methylation[[j]]
write.csv(splitted_methylation[[j]], file = paste("data/methylation/", i, "methylation_pt_", j, ".csv", sep = ""))
}
})
}
for(i in names(methylation)) {
try({
selected_methylation <- methylation[[i]]#[, !is.na(methylation[[i]][1, ])]
splitted_methylation <- split(selected_methylation, rep(1:ceiling(nrow(selected_methylation)/10), each = 10, length.out = nrow(selected_methylation)))
#write_feather(selected_methylation, path = paste("data/methylation/", i, "methylation.feather", sep = ""))
for(j in 1:length(splitted_methylation)){
methylation_part <- splitted_methylation[[j]]
save(methylation_part, file = paste("data/methylation/", i, "methylation_pt_", j, ".csv", sep = ""))
}
})
}
for(i in names(methylation)) {
try({
selected_methylation <- methylation[[i]]#[, !is.na(methylation[[i]][1, ])]
splitted_methylation <- split(selected_methylation, rep(1:ceiling(nrow(selected_methylation)/10), each = 10, length.out = nrow(selected_methylation)))
#write_feather(selected_methylation, path = paste("data/methylation/", i, "methylation.feather", sep = ""))
for(j in 1:length(splitted_methylation)){
methylation_part <- splitted_methylation[[j]]
save(methylation_part, file = paste("data/methylation/", i, "methylation_pt_", j, ".Rdata", sep = ""))
}
})
}
for(i in names(methylation)) {
if(nrow(methylation[[i]]) > 10) {
selected_methylation <- methylation[[i]]#[, !is.na(methylation[[i]][1, ])]
splitted_methylation <- split(selected_methylation, rep(1:ceiling(nrow(selected_methylation)/10), each = 10, length.out = nrow(selected_methylation)))
#write_feather(selected_methylation, path = paste("data/methylation/", i, "methylation.feather", sep = ""))
for(j in 1:length(splitted_methylation)){
methylation_part <- splitted_methylation[[j]]
save(methylation_part, file = paste("data/methylation/", i, "methylation_pt_", j, ".Rdata", sep = ""))
}
}
}
files <- list.files(path = "data/methylation")
files <- list.files(path = "data/methylation", pattern = "BRCA")
files <- list.files(path = "data/methylation", pattern = "BRCA", full.names = TRUE)
BRCA_methylation <- data.frame()
for(file in files) {
load(file)
rbind(BRCA_methylation, methylation_part)
}
rbind(BRCA_methylation, methylation_part)
files <- list.files(path = "data/methylation", pattern = "BRCA", full.names = TRUE)
BRCA_methylation <- data.frame()
for(file in files) {
load(file)
BRCA_methylation <- rbind(BRCA_methylation, methylation_part)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
RColorBrewer::brewer.pal.info
rownames(RColorBrewer::brewer.pal.info)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/rafalc/Documents/MLGenSig/KRAB_ZNF/work/meth_expr_correlation/data/source_data/isoforms.rda")
View(isoforms)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/rafalc/Documents/MLGenSig/3. isoforms/data/all_isoforms.rda")
all_isoforms %>% filter(group %in% c("01", "11")) %>%
group_by(cohort, gene, isoform, group) %>%
dplyr::summarize(mean_expression = mean(value),
`25%`= quantile(value, probs=0.25, na.rm = TRUE),
`50%`= quantile(value, probs=0.5),
`75%`= quantile(value, probs=0.75),
n_onservations = n()) %>%
mutate(group = sub(x = group, "01", "cancer tissue")) %>%
mutate(group = sub(x = group, "11", "normal tissue"))
tmp <- all_isoforms %>% filter(group %in% c("01", "11")) %>%
group_by(cohort, gene, isoform, group) %>%
dplyr::summarize(mean_expression = mean(value),
`25%`= quantile(value, probs=0.25, na.rm = TRUE),
`50%`= quantile(value, probs=0.5),
`75%`= quantile(value, probs=0.75),
n_onservations = n()) %>%
mutate(group = sub(x = group, "01", "cancer tissue")) %>%
mutate(group = sub(x = group, "11", "normal tissue"))
load("C:/Users/rafalc/Documents/MLGenSig/3. isoforms/data/test_cancer_vs_normal.rda")
test_cancer_vs_normal %>% filter(p_value != "NA") %>% left_join(tmp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/rafalc/Documents/MLGenSig/2. correlation/data/illumina_humanmethylation_27_data.rda")
View(illumina_humanmethylation_27_data)
getwd()
setwd("~/MLGenSig/KRAB_ZNF/work/isoforms")
downloadTCGA(dataSet = "isoforms")
downloadTCGA(dataSet = "isoforms", cancerTypes = ("BRCA"))
downloadTCGA(dataSet = "isoforms", cancerTypes = ("BRCA"),destDir = getwd())
setwd("~/MLGenSig/KRAB_ZNF/work/isoforms")
tmp <- read.table(file = "knownToRefSeq.txt")
View(tmp)
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
View(isoforms)
View(test_cancer_vs_normal)
View(test_cancer_vs_normal)
View(tmp)
test_cancer_vs_normal %>% left_join(tmp)
View(tmp)
colnames(tmp) <- c("isoform", "genbank")
View(tmp)
test_cancer_vs_normal %>% left_join(tmp)
grep(tmp$isoform, pattern = "uc003wfo.2")
grep(tmp$isoform, pattern = "uc003wfo.")
View(tmp)
grepl(tmp$isoform, pattern = "uc003wfo.")
grep(tmp$isoform, pattern = "uc003wfo.")
regexpr(tmp$isoform, pattern = "uc003wfo.")
grep(tmp$isoform, pattern = "uc003wfo.")
tmp2 <- tmp
tmp2$isoform <- substr(tmp2$isoform, 1, 8)
View(tmp2)
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
View(tmp2)
testc <- test_cancer_vs_normal
testc$isoform <- substr(testc$isoform, 1, 8)
View(testc)
testc %>% left_join(imp2)
testc %>% left_join(tmp2)
std <- testc %>% left_join(tmp2)
View(std)
View(tmp)
View(test_cancer_vs_normal)
uniform(test_cancer_vs_normal$isoform)
unique(test_cancer_vs_normal$isoform)
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
setwd("~/MLGenSig/3. isoforms/data/raw_txt")
isoforms <- readTCGA(path = paste("ACC.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_isoforms_normalized__data.data.txt", i, sep = ""), dataType = "isoforms")
isoforms <- readTCGA(path = paste("ACC.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_isoforms_normalized__data.data.txt"), dataType = "isoforms")
View(isoforms)
readTCGA
downloadTCGA
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
setwd("~/MLGenSig/KRAB_ZNF/work/isoforms")
nazwy <- read.table(file = "knownIsoforms.txt")
View(nazwy)
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
View(all_isoforms)
View(illumina_humanmethylation_27_data)
View(isoforms)
View(all_isoforms)
all_isoforms[all_isoforms$cohort == input$cohort3 &
all_isoforms$gene == input$gene3 &
all_isoforms$group %in% c("01", "11"), ] %>%
mutate(group = sub(group, pattern = "01", replacement = "Cancer")) %>%
mutate(group = sub(group, pattern = "11", replacement = "Normal"))
all_isoforms %>% mutate(group = sub(group, pattern = "01", replacement = "Cancer"))
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
install.packages("heatmaply")
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
