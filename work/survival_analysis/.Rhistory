}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
t.test
?t.test
View(pvals)
methylation[[1]][1:5, 1:10]
methylation_expression[["BRCA"]][1:5, 1:5]
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292)
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292) -> met_tmp
met_tmp2 <- na.omit(met_tmp)
View(met_tmp2)
boxplot(cg00000292 ~ ZNF205, met_tmp2)
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
View(met_tmp2)
length(methylation[[1]]$bcr_patient_barcode)
length(unique(methylation[[1]]$bcr_patient_barcode))
head(methylation[[1]]$bcr_patient_barcode)
dim(OV.methylation1)
dim(OV.methylation2)
methylation_expression[[1]][, "ZNF205"] %>% table()
methylation_expression[[1]][, "cg00000292"] %>% summary()
methylation[[1]][, "cg00000292"] %>% summary()
length(methylation[[1]][, "cg00000292"])
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
methylation <- list(
BRCA = BRCA.methylation,
COAD = COAD.methylation,
COADREAD = COADREAD.methylation,
GBM = GBM.methylation,
GBMLGG = GBMLGG.methylation,
KIPAN = KIPAN.methylation,
KIRC = KIRC.methylation,
KIRP = KIRP.methylation,
LAML = LAML.methylation,
LUAD = LUAD.methylation,
LUSC = LUSC.methylation,
OV = rbind(OV.methylation1, OV.methylation2),
READ = READ.methylation,
STAD = STAD.methylation,
STES = STES.methylation,
UCEC = UCEC.methylation
)
for(i in names(methylation)) {
methylation[[i]] <- methylation[[i]] %>%
mutate(bcr_patient_barcode = substr(bcr_patient_barcode, 1, 12))
}
methylation_expression <- list()
for(i in names(methylation)) {
methylation_expression[[i]] <- expressions_split[[i]] %>% left_join(methylation[[i]])
}
cpg_islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
n_of_combinations <- length(islands)*length(selected_genes)*length(methylation)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
View(pvals)
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw=raw[,c(2,3,4)] # getting rid of the "people" variable as I see no use for it
freq=table(col(raw), as.matrix(raw)) # get the counts of each factor level
Names=c("Food","Music","People")     # create list of names
data=data.frame(cbind(freq),Names)   # combine them into a data frame
data=data[,c(5,3,1,2,4)]             # sort columns
# melt the data frame for plotting
data.m <- melt(data, id.vars='Names')
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
data.m <- melt(data, id.vars='Names')
library(reshape)
data.m <- melt(data, id.vars='Names')
library(ggplot2)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "identity", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
View(data.m)
# plot everything
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
# plot everything
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
View(data.m)
View(data.m)
View(data.m)
datat <- data.m[data.m$variable %in% c("Bad", "Good"), ]
View(datat)
View(datat)
datat[datat$variable = "Good", "value"]
View(datat)
datat[datat$variable == "Good", "value"]
datat[datat$variable == "Good", "value"] <- - datat[datat$variable == "Good", "value"]
View(datat)
# plot everything
ggplot(datat, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
shiny::runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
runApp('MLGenSig/KRAB_ZNF/app')
load("data/expressions_normal.RData")
setwd("~/MLGenSig/KRAB_ZNF/app")
load("data/expressions_normal.RData")
expressions_normal %>% select("dataset", "HKR1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("data/expressions_all.RData")
load("selected_genes_all.RData")
load("data/selected_genes_all.RData")
load("data/selected_genes_all.Rdata")
expressions <- expressionsTCGA(ACC.rnaseq,
BLCA.rnaseq,
BRCA.rnaseq,
CESC.rnaseq,
CHOL.rnaseq,
COAD.rnaseq,
COADREAD.rnaseq,
DLBC.rnaseq,
ESCA.rnaseq,
#FPPP.rnaseq,
GBM.rnaseq,
GBMLGG.rnaseq,
HNSC.rnaseq,
KICH.rnaseq,
KIPAN.rnaseq,
KIRC.rnaseq,
KIRP.rnaseq,
LAML.rnaseq,
LGG.rnaseq,
LIHC.rnaseq,
LUAD.rnaseq,
LUSC.rnaseq,
#MESO.rnaseq,
OV.rnaseq,
PAAD.rnaseq,
PCPG.rnaseq,
PRAD.rnaseq,
READ.rnaseq,
SARC.rnaseq,
SKCM.rnaseq,
STAD.rnaseq,
STES.rnaseq,
TGCT.rnaseq,
THCA.rnaseq,
THYM.rnaseq,
UCEC.rnaseq,
UCS.rnaseq,
UVM.rnaseq,
extract.cols = selected_genes) %>%
filter(substr(bcr_patient_barcode, 14, 15) == "01")
selected_genes <- selected_genes_all
expressions <- expressionsTCGA(ACC.rnaseq,
BLCA.rnaseq,
BRCA.rnaseq,
CESC.rnaseq,
CHOL.rnaseq,
COAD.rnaseq,
COADREAD.rnaseq,
DLBC.rnaseq,
ESCA.rnaseq,
#FPPP.rnaseq,
GBM.rnaseq,
GBMLGG.rnaseq,
HNSC.rnaseq,
KICH.rnaseq,
KIPAN.rnaseq,
KIRC.rnaseq,
KIRP.rnaseq,
LAML.rnaseq,
LGG.rnaseq,
LIHC.rnaseq,
LUAD.rnaseq,
LUSC.rnaseq,
#MESO.rnaseq,
OV.rnaseq,
PAAD.rnaseq,
PCPG.rnaseq,
PRAD.rnaseq,
READ.rnaseq,
SARC.rnaseq,
SKCM.rnaseq,
STAD.rnaseq,
STES.rnaseq,
TGCT.rnaseq,
THCA.rnaseq,
THYM.rnaseq,
UCEC.rnaseq,
UCS.rnaseq,
UVM.rnaseq,
extract.cols = selected_genes) %>%
filter(substr(bcr_patient_barcode, 14, 15) == "01")
library(RTCGA.rnaseq)   # Gene expression data
expressions <- expressionsTCGA(ACC.rnaseq,
BLCA.rnaseq,
BRCA.rnaseq,
CESC.rnaseq,
CHOL.rnaseq,
COAD.rnaseq,
COADREAD.rnaseq,
DLBC.rnaseq,
ESCA.rnaseq,
#FPPP.rnaseq,
GBM.rnaseq,
GBMLGG.rnaseq,
HNSC.rnaseq,
KICH.rnaseq,
KIPAN.rnaseq,
KIRC.rnaseq,
KIRP.rnaseq,
LAML.rnaseq,
LGG.rnaseq,
LIHC.rnaseq,
LUAD.rnaseq,
LUSC.rnaseq,
#MESO.rnaseq,
OV.rnaseq,
PAAD.rnaseq,
PCPG.rnaseq,
PRAD.rnaseq,
READ.rnaseq,
SARC.rnaseq,
SKCM.rnaseq,
STAD.rnaseq,
STES.rnaseq,
TGCT.rnaseq,
THCA.rnaseq,
THYM.rnaseq,
UCEC.rnaseq,
UCS.rnaseq,
UVM.rnaseq,
extract.cols = selected_genes) %>%
filter(substr(bcr_patient_barcode, 14, 15) == "01")
selected_genes_colnames <- sapply(selected_genes, grep, colnames(BRCA.rnaseq), value = TRUE) %>% unlist()
sapply(strsplit(colnames(BRCA.rnaseq), "\\|"), function(x) {x[[1]]})
# extractiong column names for selected genes
sapply(strsplit(colnames(BRCA.rnaseq), "\\|"), function(x) {x[[1]]}) %in% selected_genes
# extractiong column names for selected genes
table(sapply(strsplit(colnames(BRCA.rnaseq), "\\|"), function(x) {x[[1]]}) %in% selected_genes)
selected_genes_colnames <- colnames(BRCA.rnaseq)[sapply(strsplit(colnames(BRCA.rnaseq), "\\|"), function(x) {x[[1]]}) %in% selected_genes]
expressions <- expressionsTCGA(ACC.rnaseq,
BLCA.rnaseq,
BRCA.rnaseq,
CESC.rnaseq,
CHOL.rnaseq,
COAD.rnaseq,
COADREAD.rnaseq,
DLBC.rnaseq,
ESCA.rnaseq,
#FPPP.rnaseq,
GBM.rnaseq,
GBMLGG.rnaseq,
HNSC.rnaseq,
KICH.rnaseq,
KIPAN.rnaseq,
KIRC.rnaseq,
KIRP.rnaseq,
LAML.rnaseq,
LGG.rnaseq,
LIHC.rnaseq,
LUAD.rnaseq,
LUSC.rnaseq,
#MESO.rnaseq,
OV.rnaseq,
PAAD.rnaseq,
PCPG.rnaseq,
PRAD.rnaseq,
READ.rnaseq,
SARC.rnaseq,
SKCM.rnaseq,
STAD.rnaseq,
STES.rnaseq,
TGCT.rnaseq,
THCA.rnaseq,
THYM.rnaseq,
UCEC.rnaseq,
UCS.rnaseq,
UVM.rnaseq,
extract.cols = selected_genes_colnames) %>%
filter(substr(bcr_patient_barcode, 14, 15) == "01")
expressions_all <- expressions
colnames(expressions_all)
getwd()
sapply(strsplit(colnames(expressions_all)[3:ncol(expressions_all)], split = "\\|"), function(x)
x[[1]])
colnames(expressions_all)[3:ncol(expressions_all)] <-
sapply(strsplit(colnames(expressions_all)[3:ncol(expressions_all)], split = "\\|"), function(x)
x[[1]])
expressions_all$dataset
gsub(pattern = ".rnaseq", replacement = "", x = expressions_all$dataset)
expressions_all$dataset <- gsub(pattern = ".rnaseq", replacement = "", x = expressions_all$dataset)
save(expressions_all, file = "data/expressions_all.RData")
runApp()
shiny::runApp()
load("data/survival_data.Rdata")
load("data/survival_data_cat_median.Rdata")
load("data/survival_data_cat_optimal.Rdata")
colnames(survival_data_cat_optimal)
load("C:/Users/rafalc/Documents/MLGenSig/KRAB_ZNF/app/data/pvals_median.RData")
View(pvals_median)
getwd
getwd()
View(survival_data_cat_optimal)
colnames(survival_data_cat_optimal)
colnames(survival_data_cat_median)
# Calculate p-values of log-rank tests for each pair [gene, cohort] using optimal cutpoint
genes <- colnames(survival_data_cat_median)[5:ncol(survival_data_cat_median)]
cohorts <- unique(survival_data_cat_optimal$dataset)
pvals_optimal <- data.frame()
test_results_optimal_list <- list()
k <- 1
for (i in cohorts) {
for(j in genes) {
try(
{
test <- survdiff(as.formula(paste("Surv(times, patient.vital_status) ~ ", j)),
data = survival_data_cat_optimal[survival_data_cat_optimal$dataset == i, ])
p_value <- NULL
p_value <- 1 - pchisq(test$chisq, 1)
pvals_optimal[i, j] <- p_value
n_high <- survival_data_cat_optimal %>% filter(dataset == i) %>% select(j) %>% filter(.[[1]] == "high") %>% nrow()
n_low <- survival_data_cat_optimal %>% filter(dataset == i) %>% select(j) %>% filter(.[[1]] == "low") %>% nrow()
hazard_ratio <- (test$obs[1]/test$exp[1])/(test$obs[2]/test$exp[2])
test_results_optimal_list[[k]] <- c(cohort = i, gene = j, n_low = n_low, n_high = n_high, p_value = p_value, hazard_ratio = hazard_ratio) %>% t() %>% data.frame()
k <- k+1
}, silent = TRUE)
}
}
setwd("~/MLGenSig/KRAB_ZNF/work/survival_analysis")
pvals_optimal$cohort <- rownames(pvals_optimal)
save(pvals_optimal, file = "pvals_optimal.Rdata")
test_results_optimal <- bind_rows(test_results_optimal_list)
save(test_results_optimal, file = "test_results_optimal.Rdata")
pvals_median <- data.frame()
test_results_median_list <- list()
k <- 1
for (i in cohorts) {
for(j in genes) {
try(
{
test <- survdiff(as.formula(paste("Surv(times, patient.vital_status) ~ ", j)),
data = survival_data_cat_median[survival_data_cat_median$dataset == i, ])
p_value <- 1 - pchisq(test$chisq, 1)
pvals_median[i, j] <- p_value
n_high <- survival_data_cat_median %>% filter(dataset == i) %>% select(j) %>% filter(.[[1]] == "high") %>% nrow()
n_low <- survival_data_cat_median %>% filter(dataset == i) %>% select(j) %>% filter(.[[1]] == "low") %>% nrow()
hazard_ratio <- (test$obs[1]/test$exp[1])/(test$obs[2]/test$exp[2])
test_results_median_list[[k]] <- c(cohort = i, gene = j, n_low = n_low, n_high = n_high, p_value = p_value, hazard_ratio = hazard_ratio) %>% t() %>% data.frame()
k <- k+1
}, silent = TRUE)
}
}
save(pvals_median, file = "pvals_median.Rdata")
test_results_median <- bind_rows(test_results_median_list)
save(test_results_median, file = "test_results_median.Rdata")
load("C:/Users/rafalc/Documents/MLGenSig/KRAB_ZNF/work/survival_analysis/pvals_optimal.Rdata")
View(pvals_optimal)
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
runApp('~/MLGenSig/KRAB_ZNF/app')
