UCEC = UCEC.methylation
)
library(MetExpR)
?CpG_mean
CpG_mean
dim(methylation[[1]])
343*27579
names
names(methylation)
methylation_expression[[1]][1:3, 1:10]
pvals <- data.frame()
row_n <- 1
?t.test
pvals <- data.frame("cohort", "gene", "island", "pval")
View(pvals)
?data_frame
data.frame()
?data.frame
pvals <- data.frame("cohort" = "", "gene", "island", "pval")
View(pvals)
?t.test
row_n <- 1
pvals <- data.frame("cohort" = "", "gene" = "", "island" = "", "pval" = "")
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in islands[1:10]) {
low_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k]
high_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k]
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value
}
}
}
?t.test
row_n <- 1
pvals <- data.frame("cohort" = "", "gene" = "", "island" = "", "pval" = "")
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in islands[1:10]) {
low_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k]
high_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k]
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
}
}
}
row_n <- 1
pvals <- data.frame("cohort" = "", "gene" = "", "island" = "", "pval" = "")
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in islands[1:10]) {
low_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k]
high_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k]
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
row_n <- 1
pvals <- data.frame("cohort" = "", "gene" = "", "island" = "", "pval" = "")
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:1]) {
for(k in islands[1:1]) {
low_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k]
high_expr <- methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k]
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k]
methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k]
row_n <- 1
pvals <- data.frame("cohort" = "", "gene" = "", "island" = "", "pval" = "")
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:1]) {
for(k in islands[1:1]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
row_n <- 1
pvals <- data.frame()
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:1]) {
for(k in islands[1:1]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
View(pvals)
View(pvals)
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1]) {
for(k in islands[2]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
methylation[[1]][1:5, "5500"]
islands[2]
methylation[[1]][1:5, 1:5]
colnames(methylation[[1]])
colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
islands[2]
cpg_islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1]) {
for(k in cpg_islands[2]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value})
row_n <- row_n + 1
}
}
}
View(pvals)
methylation[[1]][1:5, 5]
methylation[[1]][, 5]
methylation[[1]][1:10, 1:8]
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
test <- t.test(low_expr, high_expr)
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
pvals[row_n, "pval"] <- test$p.value
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)[1]) {
for(j in selected_genes[1:10]) {
for(k in cpg_islands[1:10]) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
t.test
?t.test
View(pvals)
methylation[[1]][1:5, 1:10]
methylation_expression[["BRCA"]][1:5, 1:5]
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292)
methylation_expression[["BRCA"]] %>% filter(ZNF205 %in% c(1, 10)) %>% select(ZNF205, cg00000292) -> met_tmp
met_tmp2 <- na.omit(met_tmp)
View(met_tmp2)
boxplot(cg00000292 ~ ZNF205, met_tmp2)
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
boxplot(cg00000292 ~ ZNF205, methylation_expression[["BRCA"]])
View(met_tmp2)
length(methylation[[1]]$bcr_patient_barcode)
length(unique(methylation[[1]]$bcr_patient_barcode))
head(methylation[[1]]$bcr_patient_barcode)
dim(OV.methylation1)
dim(OV.methylation2)
methylation_expression[[1]][, "ZNF205"] %>% table()
methylation_expression[[1]][, "cg00000292"] %>% summary()
methylation[[1]][, "cg00000292"] %>% summary()
length(methylation[[1]][, "cg00000292"])
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
methylation <- list(
BRCA = BRCA.methylation,
COAD = COAD.methylation,
COADREAD = COADREAD.methylation,
GBM = GBM.methylation,
GBMLGG = GBMLGG.methylation,
KIPAN = KIPAN.methylation,
KIRC = KIRC.methylation,
KIRP = KIRP.methylation,
LAML = LAML.methylation,
LUAD = LUAD.methylation,
LUSC = LUSC.methylation,
OV = rbind(OV.methylation1, OV.methylation2),
READ = READ.methylation,
STAD = STAD.methylation,
STES = STES.methylation,
UCEC = UCEC.methylation
)
for(i in names(methylation)) {
methylation[[i]] <- methylation[[i]] %>%
mutate(bcr_patient_barcode = substr(bcr_patient_barcode, 1, 12))
}
methylation_expression <- list()
for(i in names(methylation)) {
methylation_expression[[i]] <- expressions_split[[i]] %>% left_join(methylation[[i]])
}
cpg_islands <- colnames(methylation[[1]])[2:length(colnames(methylation[[1]]))]
n_of_combinations <- length(islands)*length(selected_genes)*length(methylation)
row_n <- 1
pvals <- data.frame()
for(i in names(methylation_expression)) {
for(j in selected_genes) {
for(k in cpg_islands) {
low_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 1 , k])
high_expr <- na.omit(methylation_expression[[i]][methylation_expression[[i]][, j] == 10 , k])
pvals[row_n, "cohort"] = i
pvals[row_n, "gene"] = j
pvals[row_n, "island"] = k
try({
test <- t.test(low_expr, high_expr)
pvals[row_n, "pval"] <- test$p.value
})
row_n <- row_n + 1
}
}
}
View(pvals)
View(pvals)
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw=raw[,c(2,3,4)] # getting rid of the "people" variable as I see no use for it
freq=table(col(raw), as.matrix(raw)) # get the counts of each factor level
Names=c("Food","Music","People")     # create list of names
data=data.frame(cbind(freq),Names)   # combine them into a data frame
data=data[,c(5,3,1,2,4)]             # sort columns
# melt the data frame for plotting
data.m <- melt(data, id.vars='Names')
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
data.m <- melt(data, id.vars='Names')
library(reshape)
data.m <- melt(data, id.vars='Names')
library(ggplot2)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "identity", stat="identity")
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
# plot everything
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
View(data.m)
# plot everything
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %>% in c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
# plot everything
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "fill", stat="identity")
ggplot(data.m[data.m$variable %in% c("Bad", "Good"), ], aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
View(data.m)
View(data.m)
View(data.m)
datat <- data.m[data.m$variable %in% c("Bad", "Good"), ]
View(datat)
View(datat)
datat[datat$variable = "Good", "value"]
View(datat)
datat[datat$variable == "Good", "value"]
datat[datat$variable == "Good", "value"] <- - datat[datat$variable == "Good", "value"]
View(datat)
# plot everything
ggplot(datat, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "stack", stat="identity")
library(tidyverse)
library(xlsx)
library(RTCGA.rnaseq)
library(reshape2)
library(ggplot2)
library(pheatmap)
library(plotly)
library(d3heatmap)
krab_corsinotti <- list.files("data/source")
krab_corsinotti_xlsx <- read.xlsx(paste("data/source/", krab_corsinotti, sep = ""), 1)
krab_corsinotti_names <- krab_corsinotti_xlsx$Gene.symbol
#krab_corsinotti_names <- krab_corsinotti_xlsx %>% filter(substr(Gene.symbol, 1, 3) == "ZNF")
selected_genes <- droplevels(krab_corsinotti_names)
setwd("~/MLGenSig/KRAB_ZNF/work/expression_normal")
krab_corsinotti <- list.files("data/source")
krab_corsinotti_xlsx <- read.xlsx(paste("data/source/", krab_corsinotti, sep = ""), 1)
krab_corsinotti_names <- krab_corsinotti_xlsx$Gene.symbol
#krab_corsinotti_names <- krab_corsinotti_xlsx %>% filter(substr(Gene.symbol, 1, 3) == "ZNF")
selected_genes <- droplevels(krab_corsinotti_names)
all_tcga_genes <- sapply(strsplit(colnames(BRCA.rnaseq), split = "\\|"), function(x) x[[1]]) %>% sort()
selected_colnames_logical <- sapply(strsplit(colnames(ACC.rnaseq), split = "\\|"), function(x) x[[1]]) %in% selected_genes
selected_colnames <- colnames(BRCA.rnaseq)[selected_colnames_logical]
found_genes <- sapply(strsplit(selected_colnames, split = "\\|"), function(x) x[[1]])
missing_krabs_tcga <- setdiff(selected_genes, found_genes)
expressions_normal <- expressionsTCGA(ACC.rnaseq,
BLCA.rnaseq,
BRCA.rnaseq,
CESC.rnaseq,
CHOL.rnaseq,
COAD.rnaseq,
COADREAD.rnaseq,
DLBC.rnaseq,
ESCA.rnaseq,
#FPPP.rnaseq,
GBM.rnaseq,
GBMLGG.rnaseq,
HNSC.rnaseq,
KICH.rnaseq,
KIPAN.rnaseq,
KIRC.rnaseq,
KIRP.rnaseq,
LAML.rnaseq,
LGG.rnaseq,
LIHC.rnaseq,
LUAD.rnaseq,
LUSC.rnaseq,
#MESO.rnaseq,
OV.rnaseq,
PAAD.rnaseq,
PCPG.rnaseq,
PRAD.rnaseq,
READ.rnaseq,
SARC.rnaseq,
SKCM.rnaseq,
STAD.rnaseq,
STES.rnaseq,
TGCT.rnaseq,
THCA.rnaseq,
THYM.rnaseq,
UCEC.rnaseq,
UCS.rnaseq,
UVM.rnaseq,
extract.cols = found_genes) %>%
filter(substr(bcr_patient_barcode, 14, 15) == "11")  # expressions for type "11", normal
#mutate(bcr_patient_barcode = substr(bcr_patient_barcode, 1, 12)) # cleaning patient barcode
View(expressions_normal)
